name: ct2
services:
  dashboards-service:
    build:
      context: D:\CT2\apps\backend\services\dashboards-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: dashboards-service
      SERVICE_PREFIX: /api/dash
    image: ct2/dashboards-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.dash.entrypoints: web
      traefik.http.routers.dash.rule: (PathPrefix(`/api/dash`) || PathPrefix(`/api/dashboards`))
      traefik.http.services.dash.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  data-quality-service:
    build:
      context: D:\CT2\apps\backend\services\data-quality-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: data-quality-service
      SERVICE_PREFIX: /api/data-quality
    image: ct2/data-quality-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.data-quality.entrypoints: web
      traefik.http.routers.data-quality.rule: (PathPrefix(`/api/data-quality`) || PathPrefix(`/api/dataquality`))
      traefik.http.services.data-quality.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  emission-factors-service:
    build:
      context: D:\CT2\apps\backend\services\emission-factors-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: emission-factors-service
      SERVICE_PREFIX: /api/factors
    image: ct2/emission-factors-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.factors.entrypoints: web
      traefik.http.routers.factors.rule: PathPrefix(`/api/factors`)
      traefik.http.services.factors.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  esg-service:
    build:
      context: D:\CT2\apps\backend\services\esg-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: esg-service
      SERVICE_PREFIX: /api/esg
    image: ct2/esg-service
    networks:
      ct2-net: null
    restart: unless-stopped
  evidence-store:
    build:
      context: D:\CT2\apps\backend\services\evidence-store
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      ARTIFACT_DIR: /var/lib/ct2/artifacts
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: evidence-store
      SERVICE_PREFIX: /api/evidence
    healthcheck:
      test:
        - CMD-SHELL
        - wget -4 -qO- http://127.0.0.1:8000/ready || exit 1
      timeout: 3s
      interval: 15s
      retries: 3
      start_period: 10s
    image: ct2/evidence-store
    networks:
      ct2-net: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: artifacts-data
        target: /var/lib/ct2/artifacts
        volume: {}
  ingestion-service:
    build:
      context: D:\CT2\apps\backend\services\ingestion-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: ingestion-service
      SERVICE_PREFIX: /api/ingest
    image: ct2/ingestion-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.ingest.entrypoints: web
      traefik.http.routers.ingest.rule: (PathPrefix(`/api/ingest`) || PathPrefix(`/api/ingestion`))
      traefik.http.services.ingest.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  jobs-service:
    build:
      context: D:\CT2\apps\backend\services\jobs-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: jobs-service
      SERVICE_PREFIX: /api/jobs
    image: ct2/jobs-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.jobs.entrypoints: web
      traefik.http.routers.jobs.rule: PathPrefix(`/api/jobs`)
      traefik.http.services.jobs.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  kpi-calculation-service:
    build:
      context: D:\CT2\apps\backend\services\kpi-calculation-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: kpi-calculation-service
      SERVICE_PREFIX: /api/kpi
    image: ct2/kpi-calculation-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.kpi.entrypoints: web
      traefik.http.routers.kpi.rule: PathPrefix(`/api/kpi`)
      traefik.http.services.kpi.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  report-compiler-service:
    build:
      context: D:\CT2\apps\backend\services\report-compiler-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      ARTIFACT_DIR: /var/lib/ct2/artifacts
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: report-compiler-service
      SERVICE_PREFIX: /api/reports
    image: ct2/report-compiler-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.reports.entrypoints: web
      traefik.http.routers.reports.rule: PathPrefix(`/api/reports`)
      traefik.http.services.reports.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
    volumes:
      - type: volume
        source: artifacts-data
        target: /var/lib/ct2/artifacts
        volume: {}
  search-index-service:
    build:
      context: D:\CT2\apps\backend\services\search-index-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: search-index-service
      SERVICE_PREFIX: /api/search
    image: ct2/search-index-service
    labels:
      traefik.enable: "true"
      traefik.http.routers.search.entrypoints: web
      traefik.http.routers.search.rule: (PathPrefix(`/api/search`) || PathPrefix(`/api/search-index`))
      traefik.http.services.search.loadbalancer.server.port: "8000"
    networks:
      ct2-net: null
    restart: unless-stopped
  time-series-service:
    build:
      context: D:\CT2\apps\backend\services\time-series-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: time-series-service
      SERVICE_PREFIX: /api/timeseries
    image: ct2/time-series-service
    networks:
      ct2-net: null
    restart: unless-stopped
  traefik:
    command:
      - --log.level=INFO
      - --entryPoints.web.address=:8081
      - --entryPoints.admin.address=:8090
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=ct2_ct2-net
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --api.dashboard=true
    container_name: ct2-traefik-1
    image: traefik:v3.0
    networks:
      ct2-net: null
      default: null
    ports:
      - mode: ingress
        target: 8081
        published: "8081"
        protocol: tcp
      - mode: ingress
        target: 8090
        published: "8090"
        protocol: tcp
    restart: unless-stopped
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: D:\CT2\compose\traefik\dynamic
        target: /etc/traefik/dynamic
        read_only: true
        bind:
          create_host_path: true
  xbrl-mapping-service:
    build:
      context: D:\CT2\apps\backend\services\xbrl-mapping-service
      dockerfile: Dockerfile
    command:
      - npm
      - run
      - start:prod
    environment:
      HOST: 0.0.0.0
      PORT: "8000"
      SERVICE_NAME: xbrl-mapping-service
      SERVICE_PREFIX: /api/xbrl
    image: ct2/xbrl-mapping-service
    networks:
      ct2-net: null
    restart: unless-stopped
networks:
  ct2-net:
    name: ct2_ct2-net
    external: true
  default:
    name: ct2_default
volumes:
  artifacts-data:
    name: ct2_artifacts-data
    driver: local
